name: CI
on:
  pull_request:
    branches:
    - "*"
  push:
    branches:
    - root

jobs:
  changes:
    name: Filter Changes
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.filter.outputs.go }}
      charts: ${{ steps.filter.outputs.charts }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        filters: |
          go:
          - '**/*.go'
          - 'go.mod'
          - 'go.sum'
          - 'test/e2e/**/*'
          - '.config/.golangci.yaml'
          - '.github/workflows/ci.yaml'
          charts:
          - 'deploy/chart/Chart.yaml'
          - 'deploy/chart/**/*'
          - '.github/workflows/ci.yaml'

  security:
    name: Security
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (needs.changes.outputs.go == 'true')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: -exclude-dir=test -exclude-dir=docs ./... --timeout 2m

  lint:
    name: Lint Go Files
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (needs.changes.outputs.go == 'true')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Lint
      uses: golangci/golangci-lint-action@v2
      with:
        args: --sort-results --config ./.config/.golangci.yaml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (needs.changes.outputs.go == 'true' || needs.changes.outputs.charts == 'true')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      id: go
      with:
        go-version: 1.17

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: false
        outputs: type=tar,dest=reflector.tar
        tags: havulv/reflector:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Save image
      id: image_save
      run: |
        echo "Gzip the tar ball it..."
        cat reflector.tar | pigz > reflector.tar.gz

    - name: Upload image 
      uses: actions/upload-artifact@v2
      with:
        name: reflector.tar.gz
        path: reflector.tar.gz

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  test:
    name: Test Code
    runs-on: ubuntu-latest
    needs:
    - changes
    if: |
      (needs.changes.outputs.go == 'true')
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Go 1.17
      id: go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Test
      id: test
      run: |
        make test/verbose

    - name: Test Race Conditions
      id: test_race
      if: ${{ false }} # Disable while fixing race conditions
      run: |
        make test/race

  helm:
    name: Helm chart
    runs-on: ubuntu-latest
    needs:
    - changes
    - build
    if: |
      (needs.changes.outputs.charts == 'true')
    steps:
    - name: Checkout
      uses: actions/checkout@v2
  
    - name: Fetch image
      uses: actions/download-artifact@v2
      with:
        name: reflector.tar.gz

    - name: Kube permission fix
      run: |
        sudo mkdir -p $HOME/.kube
        sudo chmod -R 777 $HOME/.kube
  
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: reflector.tar.gz
        failOnError: false

    - name: Load images from tarball
      run: |
        echo "Loading docker images..."
        pigz -dc reflector.tar.gz > reflector.tar | docker load
        docker tag gcr.io/havulv/reflector:$(git describe --tags --always --dirty) localhost:5000/havulv/reflector:latest

    - name: Test
      run: |
        make E2E_ARGS="--cleanup --build=false" test/e2e

  # Always cleanup artifacts
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs:
    - changes
    - build
    - helm
    steps:
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: reflector.tar.gz
        failOnError: false
